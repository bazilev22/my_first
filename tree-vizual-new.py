#%%
import igraph
# Создание пустого графа
G = igraph.Graph()

# Добавление вершин
G.add_vertices(25)

# Определение структуры дерева с произвольным числом дочерних вершин
tree_structure = {
    0: [1, 2, 3],
    1: [4, 5],
    2: [],
    3: [6],
    4: [],
    5: [],
    6: [7, 8, 9],
    7: [],
    8: [],
    9: [10],
    10: [],
    # и так далее, в зависимости от вашей структуры дерева
}

# Добавление ребер в соответствии с заданной структурой
for parent, children in tree_structure.items():
    for child in children:
        G.add_edge(parent, child)

# Получение размещения вершин на плоскости
lay = G.layout('rt')

# Отображение размещения вершин
print(lay)




#%%
